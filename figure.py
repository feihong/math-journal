"""
Render asymptote code into svg files
"""
from pathlib import Path
import subprocess
import os
import hashlib

from markupsafe import Markup
from htpy import pre


figures_dir = Path('figures')
asymptote_dir = Path('asymptote_dir').absolute()


def get_hash(code):
    return hashlib.md5(code.encode('utf-8')).hexdigest()


def get_svg_file(code):
    return figures_dir / f'{get_hash(code)}.svg'

def get_asy_file(code):
   return figures_dir / f'{get_hash(code)}.asy'

def generate_svg_files(asy_files):
    os.environ['ASYMPTOTE_DIR'] = str(asymptote_dir)
    cmd = [
        'asy',
        '-outformat', 'svg',
        *(f.name for f in asy_files),
    ]
    print(cmd)
    return subprocess.run(cmd, cwd=figures_dir, env=os.environ, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                          encoding='utf-8')

def generate_svg_code(code):
    """
    Return the SVG of the figure generated by the given code, or an error message
    """
    os.environ['ASYMPTOTE_DIR'] = str(asymptote_dir)
    cmd = [
        'asy',
        '-outformat', 'svg',
        '-outname', 'debug',
        '-',
    ]
    print(cmd)
    proc = subprocess.run(cmd, cwd=figures_dir, input=code, env=os.environ, stdout=subprocess.PIPE,
                          stderr=subprocess.STDOUT, encoding='utf-8')
    if proc.returncode == 0:
        svg_file = figures_dir / 'debug.svg'
        with svg_file.open() as fp:
            # First two lines are metadata
            fp.readline()
            fp.readline()
            return Markup(fp.read())
    else:
        return pre[proc.stdout]
